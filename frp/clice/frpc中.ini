#[common]为整体截面
# common    35个配置选项
# common 
# common 
# common 
[common]
#common1  IP
# IPv6的字面地址或主机名必须被括起来 "[::1]:80"，"[ipv6-host]:http"或"[ipv6-host%zone]:80" 对于单个“server_addr”字段，不需要方括号，如“server_addr =::”。
server_addr = 0.0.0.0
server_port = 7000

#common2  最大时间
#拨号到服务器等待连接完成的最大时间缺省值是10秒。
# dial_server_timeout = 10

#common3  keepalive探测间隔
# dial_server_keepalive指定FRPC和frps之间活动网络连接的keepalive探测间隔。
#如果为负，则禁用keep-alive探测。
# dial_server_keepalive = 7200

#common4  设置http_proxy
#如果你想通过HTTP代理或socks5代理或NTLM代理连接FRPS，你可以在这里或全局环境变量中设置http_proxy
#它只在协议为TCP时工作
# http_proxy = http://user:passwd@192.168.1.128:8080
# http_proxy = socks5://user:passwd@192.168.1.128:1080
# http_proxy = ntlm://user:passwd@192.168.1.128:2080

#common5  logFile路径
# console或real logFile路径，例如。/frpc.log
Log_file = ./frpc.log

#common6  跟踪，调试，信息，警告，错误
Log_level = info

Log_max_days = 3

#common7  当log_file为console时禁用日志颜色，默认为false
Disable_log_color = false

# common8 验证 心跳中包含认证令牌
# 应该与你的frps.ini相同
# authenticate_heartbeats指定是否在发送给frps的心跳中包含认证令牌。缺省情况下，该值为false。
Authenticate_heartbeats = false

# common9 验证 工作连接中包含认证令牌
# authenticate_new_work_conns指定是否在发送到frps的新工作连接中包含身份验证令牌。缺省情况下，该值为false。
Authenticate_new_work_conns = false

# common10 认证令牌
Token = 12345678

authentication_method =

# common11 令牌的客户端ID
# 如果authentication_method = " OIDC "，则# oidc_client_id指定用于在OIDC身份验证中获取令牌的客户端ID。
#默认值为“”。
oidc_client_id =

# common12 获取令牌的客户端密码
# oidc_client_secret指定在AuthenticationMethod == " OIDC "时用于在OIDC身份验证中获取令牌的客户端秘密。
#默认值为“”。
oidc_client_secret =

# common13  令牌的受众
# 如果AuthenticationMethod == " OIDC "， oidc_audience指定OIDC认证中令牌的受众。缺省值为“”。
oidc_audience =

# common14 令牌的权限
# 如果AuthenticationMethod == " OIDC "， oidc_scope指定OIDC认证中令牌的权限。缺省值为“”。
oidc_scope =

# common15 令牌端点的URL
# oidc_token_endpoint_url指定实现OIDC令牌端点的URL。如果AuthenticationMethod == " OIDC "，它将用于获得OIDC令牌。缺省值为“”。
oidc_token_endpoint_url =

# common16 令牌端点的附加参数
# oidc_additional_xxx指定要发送到OIDC令牌端点的附加参数。
#例如，如果你想指定“受众”参数，你可以这样设置。 FRP将添加"audience=<value>" "var1=<value>"到附加参数中。
# oidc_additional_audience = https://dev.auth.com/api/v2/
# oidc_additional_var1 = foobar

# common17 设置管理地址
# 设置管理地址控制frpc的操作通过HTTP API，如重载
Admin_addr = 127.0.0.1
Admin_port = 7400
Admin_user = admin
Admin_pwd = admin

# common18 管理资产目录
# 默认情况下，这些资产与frpc捆绑在一起。
# assets_dir = ./static

# common19 计数
# 将提前建立连接，默认值为零
pool_count = 5

# common20 tcp流复用
#如果使用tcp流复用，则默认值为true，它必须与frps相同
# tcp_mux = true

# common21 tcp多路复用器指定保活间隔
#为tcp多路复用器指定保活间隔。
#仅当tcp_mux为真时有效。
# tcp_mux_keepalive_interval = 60

# common22 代理名称
# 您的代理名称将更改为 {user}.{proxy}
user = your_name

# common23 登录失败时是否退出程序
#决定第一次登录失败时是否退出程序，否则继续重新登录到frps
#默认值为true
login_fail_exit = true

# common24 通信协议
#用于连接到服务器的通信协议
#现在支持tcp、kcp、quic和websocket，默认为tcp
protocol = tcp

# common25 客户端绑定ip
#在连接服务器时设置客户端绑定ip，默认值为空。
#只有当protocol=tcp或websocket时，才会使用该值。
connect_server_local_ip = 0.0.0.0

# common26 quic协议选项
# quic_keepalive_period = 10
# quic_max_idle_timeout = 30
# quic_max_incoming_streams = 100000

# common27 如果tls_enable为true，frpc将通过tls连接frps
tls_enable = true

# tls_cert_file = client.crt
# tls_key_file = client.key
# tls_trusted_ca_file = ca.crt
# tls_server_name = example.com

# common28 dns服务器
#指定dns服务器，因此frpc将使用此服务器而不是默认服务器
# dns_server = 8.8.8.8

# common29
#要以“，”分隔的代理名称
#默认值为空，表示所有代理
# start = ssh,dns

# common30
#heartbeat配置，不建议修改默认值
#hearteat_interval的默认值为10，hearteat_timeout为90。设置负值以禁用它。
# heartbeat_interval = 30
# heartbeat_timeout = 90

# common31
#客户端的其他元数据信息
meta_var1 = 123
meta_var2 = 234

# common32
#指定udp数据包大小，单位为字节。如果未设置，则默认值为1500。
#客户端和服务器之间的此参数应相同。
#它会影响udp和sudp代理。
udp_packet_size = 1500

# common33
#包括代理的其他配置文件。
# includes = ./confd/*.ini

# common34
#默认情况下，如果启用了tls，frpc将用第一个自定义字节连接frps。
#如果DisableCustomTLSFirstByte为true，frpc将不会发送该自定义字节。
disable_custom_tls_first_byte = false

# common35
#在管理侦听器中启用golang-proff处理程序。
#必须首先设置管理端口。
pprof_enable = false


# “ssh”是唯一的代理名称
#如果[common]部分中的user不为空，它将更改为{user}。｛proxy｝，例如“your_name.ssh”
# ssh      共11配置选项
# ssh
# ssh
# ssh
[ssh]

# ssh1 
# tcp | udp | http | https | stcp | xtcp, 默认为tcp
type = tcp
local_ip = 127.0.0.1
local_port = 22

# ssh2 带宽限制
# 限制此代理的带宽，单位为KB和MB
bandwidth_limit = 1MB

# ssh3 用户加密
#true或false，如果为true，将加密frps和frpc之间的消息，默认值为false
use_encryption = false

# ssh4 压缩
#如果为true，消息将被压缩
use_compression = false

# ssh5  远程端口侦听
remote_port = 6001

# ssh6 负载均衡组
#frps将对同一组中的代理进行负载平衡连接
group = test_group

# ssh6 负载均衡组密钥
#组应具有相同的组密钥
group_key = 123456

# ssh7 健康检查
#启用后端服务的健康检查，它现在支持“tcp”和“http”
#frpc将连接本地服务的端口以检测其健康状态
health_check_type = tcp

# ssh8 健康检查超时
#健康检查连接超时
health_check_timeout_s = 3

# ssh9 健康检失败查次
#如果连续3次失败，代理将从frps中删除
health_check_max_failed = 3

# ssh10 健康检查间隔
#每10秒进行一次健康检查
health_check_interval_s = 10

# ssh11 代理的附加元信息
#每个代理的附加元信息
meta_var1 = 123
meta_var2 = 234 

# ssh random     共1配置选项
# sr
# sr
# sr
[ssh_random]
type = tcp
local_ip = 127.0.0.1
local_port = 22

# sr1
#如果remote_port为0，frps将为您分配一个随机端口
remote_port = 0

# 范围
#如果要公开多个端口，请在节名中添加“range：”前缀
#frpc将生成多个代理，如“tcp_port_6010”、“tcp_pport_6011”等。
[range:tcp_port]
type = tcp
local_ip = 127.0.0.1
local_port = 6010-6020,6022,6024-6028
remote_port = 6010-6020,6022,6024-6028
use_encryption = false
use_compression = false


# dns
[dns]
type = udp
local_ip = 114.114.114.114
local_port = 53
remote_port = 6002
use_encryption = false
use_compression = false
[range:udp_port]
type = udp
local_ip = 127.0.0.1
local_port = 6010-6020
remote_port = 6010-6020
use_encryption = false
use_compression = false

#将域名解析为[server_addr]，以便使用http://web01.yourdomain.com浏览web01和http://web02.yourdomain.com浏览web02
[web01]
type = http
local_ip = 127.0.0.1
local_port = 80
use_encryption = false
use_compression = true

#http用户名和密码是对http协议的安全认证。
#如果未设置，则无需认证即可访问此自定义域名。
http_user = admin
http_pwd = admin

#如果frps的域名是frps.com，则可以通过url http://web01.frps.com访问[Web01]Proxy。
subdomain = web01
custom_domains = web01.yourdomain.com

#Locations仅适用于http类型。
locations = /,/pic

#如果http Basic AUTO用户为ABC，则将请求路由到此服务。
# route_by_http_user = abc
host_header_rewrite = example.com

#将使用前缀为“Header_”的#PARAMS来更新http请求头。
header_X-From-Where = frp
health_check_type = http

#frpc将向本地http服务发送GET Http请求‘/Status’
#Http服务返回2xx Http响应码即为活动。
health_check_url = /status
health_check_interval_s = 10
health_check_max_failed = 3
health_check_timeout_s = 3

[web02]
type = https
local_ip = 127.0.0.1
local_port = 8000
use_encryption = false
use_compression = false
subdomain = web01
custom_domains = web02.yourdomain.com
#如果不为空，frpc将使用代理协议将连接信息传输到您的本地服务。
#v1或v2或为空。
proxy_protocol_version = v2

[plugin_unix_domain_socket]
type = tcp
remote_port = 6003

#如果定义了plugin，则local_ip和local_port无效。
#plugin将处理从FRP获得的连接。
plugin = unix_domain_socket

#插件所需的前缀为“plugin_”的参数
plugin_unix_path = /var/run/docker.sock

[plugin_http_proxy]
type = tcp
remote_port = 6004
plugin = http_proxy
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_socks5]
type = tcp
remote_port = 6005
plugin = socks5
plugin_user = abc
plugin_passwd = abc

[plugin_static_file]
type = tcp
remote_port = 6006
plugin = static_file
plugin_local_path = /var/www/blog
plugin_strip_prefix = static
plugin_http_user = abc
plugin_http_passwd = abc

[plugin_https2http]
type = https
custom_domains = test.yourdomain.com
plugin = https2http
plugin_local_addr = 127.0.0.1:80
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_https2https]
type = https
custom_domains = test.yourdomain.com
plugin = https2https
plugin_local_addr = 127.0.0.1:443
plugin_crt_path = ./server.crt
plugin_key_path = ./server.key
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[plugin_http2https]
type = http
custom_domains = test.yourdomain.com
plugin = http2https
plugin_local_addr = 127.0.0.1:443
plugin_host_header_rewrite = 127.0.0.1
plugin_header_X-From-Where = frp

[secret_tcp]
#如果类型为保密的tcp，则远程端口无用。
#想要连接本地端口的人应该部署另一个带有stcp代理的frpc，角色是访问者。
type = stcp

#SK用于访客身份验证。
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false

#在stcp服务器和stcp访问者中，frpc的用户应该相同。
[secret_tcp_visitor]
#frpc角色访问者->frps->frpc角色服务器。
role = visitor
type = stcp
#您要访问的服务器名称。
server_name = secret_tcp
sk = abcdefg
#将此地址连接到访客stcp服务器
bind_addr = 127.0.0.1
bind_port = 9000
use_encryption = false
use_compression = false

[p2p_tcp]
type = xtcp
sk = abcdefg
local_ip = 127.0.0.1
local_port = 22
use_encryption = false
use_compression = false

[p2p_tcp_visitor]
role = visitor
type = xtcp
server_name = p2p_tcp
sk = abcdefg
bind_addr = 127.0.0.1
bind_port = 9001
use_encryption = false
use_compression = false

[tcpmuxhttpconnect]
type = tcpmux
multiplexer = httpconnect
local_ip = 127.0.0.1
local_port = 10701
custom_domains = tunnel1
# route_by_http_user = user1
